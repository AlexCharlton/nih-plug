name: Tests

on:
  push:
    branches:
      - '**'
    tags:
      # Run when pushing version tags, since otherwise it's impossible to
      # restart a successful build after pushing a tag
      - '*.*.*'
  pull_request:
    branches:
      - master

defaults:
  run:
    # This otherwise gets run under dash which does not support brace expansion
    shell: bash

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-latest]
    name: Build and test all components
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # Needed for git-describe to do anything useful
      - name: Fetch all git history
        run: git fetch --force --prune --tags --unshallow

      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl-dev libxcb1-dev libxcb-icccm4-dev libxcursor-dev libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          # FIXME: Needed for SIMD. Diopser can be compiled without SIMD support
          #        though, we'd actually need to test whether both versions
          #        compile
          toolchain: nightly
          profile: minimal
          default: true
      - name: Build all targets
        uses: actions-rs/cargo@v1
        with:
          command: build
          # Don't use --all-features as that will enable a whole bunch of
          # conflicting iced features
          args: --workspace --features "simd"
      - name: Run the tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  # We won't package the example plugins
  package:
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-latest]
    name: Package plugin binaries
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Fetch all git history
        run: git fetch --force --prune --tags --unshallow

      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl-dev libxcb1-dev libxcb-icccm4-dev libxcursor-dev libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          # FIXME: Needed for SIMD. Diopser can be compiled without SIMD support
          #        though, we'd actually need to test whether both versions
          #        compile
          toolchain: nightly
          profile: minimal
          default: true
      - name: Package all targets from bundler.toml
        # Instead of hardcoding which targets to build and package, we'll
        # package everything that's got en entry in the `bundler.toml` file
        run: |
          # Building can be sped up by specifying all packages in one go
          package_args=()
          for package in $(cargo xtask known-packages); do
            package_args+=("-p" "$package")
          done

          cargo xtask bundle "${package_args[@]}" --release

      - name: Determine build archive name
        run: |
          echo "ARCHIVE_NAME=nih-plugs-$(git describe --always)-${{ matrix.os }}" >> "$GITHUB_ENV"
      - name: Move all packaged plugin into a directory
        run: |
          # GitHub Action strips the top level directory, great, have another one
          mkdir "$ARCHIVE_NAME/$ARCHIVE_NAME"
          mv target/bundled/* "$ARCHIVE_NAME/$ARCHIVE_NAME"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}
